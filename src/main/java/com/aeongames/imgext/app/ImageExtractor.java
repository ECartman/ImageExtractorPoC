/* 
 *  Copyright Â© 2024,2025 Eduardo Vindas Cordoba. All rights reserved.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 * 
 */
package com.aeongames.imgext.app;

import com.aeongames.edi.utils.clipboard.ClipboardService;
import com.aeongames.imgext.components.ImageProcessor;
import java.awt.Desktop;
import java.awt.Image;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author Eduardo Vindas
 */
public class ImageExtractor extends javax.swing.JFrame {

    private final ClipboardService MainListener;
    private final ImageProcessor MyProcessor;

    private static Image LoadAppIcon(String path) {
        var resource = ImageExtractor.class.getResource(path);
        return resource == null ? null : new javax.swing.ImageIcon(resource).getImage();
    }

    /**
     * create a new Frame.that will be display on the OS.
     *
     * @throws java.security.NoSuchAlgorithmException
     */
    public ImageExtractor() throws NoSuchAlgorithmException {
        initComponents();
        var safePath = Path.of(System.getProperty("user.home"), "Downloads");
        txtfolder.setText(safePath.toString());
        MyProcessor = new ImageProcessor();
        MainListener = ClipboardService.getClipboardService();
        initListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PImage = new com.aeongames.edi.utils.visual.Panels.ImagePanel();
        txtstatusbar = new javax.swing.JLabel();
        PBstate = new javax.swing.JProgressBar();
        translucentPanel1 = new com.aeongames.edi.utils.visual.Panels.TranslucentPanel();
        jLabel5 = new javax.swing.JLabel();
        FileSpiner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtfolder = new javax.swing.JTextField();
        btsave = new javax.swing.JButton();
        txtImageType = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtLog = new com.aeongames.edi.utils.visual.TranslucentTextArea();
        opFolder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/aeongames/imgext/app/resource/app"); // NOI18N
        setTitle(bundle.getString("app.name")); // NOI18N
        setIconImage(LoadAppIcon(bundle.getString("app.image.ico")));
        setMinimumSize(new java.awt.Dimension(500, 700));

        javax.swing.GroupLayout PImageLayout = new javax.swing.GroupLayout(PImage);
        PImage.setLayout(PImageLayout);
        PImageLayout.setHorizontalGroup(
            PImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PImageLayout.setVerticalGroup(
            PImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 329, Short.MAX_VALUE)
        );

        txtstatusbar.setText("Ready");

        jLabel5.setText("Current Page:");

        FileSpiner.setModel(new javax.swing.SpinnerNumberModel(1, 0, null, 1));

        jLabel3.setText("Image Type:");

        jLabel4.setText("Save Folder: ");

        btsave.setText("Set Save Folder");
        btsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btsaveActionPerformed(evt);
            }
        });

        txtImageType.setText("None");

        jScrollPane2.setOpaque(false);
        jScrollPane2.getViewport().setOpaque(false);

        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane2.setViewportView(txtLog);

        opFolder.setText("Open folder");
        opFolder.setToolTipText("");
        opFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opFolderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout translucentPanel1Layout = new javax.swing.GroupLayout(translucentPanel1);
        translucentPanel1.setLayout(translucentPanel1Layout);
        translucentPanel1Layout.setHorizontalGroup(
            translucentPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(translucentPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FileSpiner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtImageType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(121, 121, 121))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(translucentPanel1Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(2, 2, 2)
                .addComponent(txtfolder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btsave, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opFolder)
                .addContainerGap())
        );
        translucentPanel1Layout.setVerticalGroup(
            translucentPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(translucentPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(translucentPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(FileSpiner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtImageType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(translucentPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtfolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btsave)
                    .addComponent(opFolder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(PBstate, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtstatusbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(translucentPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(PImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(translucentPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtstatusbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PBstate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btsaveActionPerformed
        var DownloadPath = Path.of(System.getProperty("user.home"), "Downloads");
        var stringpath = txtfolder.getText().strip();
        if (!stringpath.isBlank()) {
            DownloadPath = Path.of(stringpath);
        }
        JFileChooser chs = new JFileChooser(DownloadPath.toFile());
        chs.setDialogTitle("Please Select the Destination Folder");
        chs.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chs.showSaveDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            if (Files.isWritable(chs.getSelectedFile().toPath())) {
                String Path = chs.getSelectedFile().toString();
                txtfolder.setText(Path);
            } else {
                txtfolder.setText(Path.of(System.getProperty("user.home"), "Downloads").toString());
            }
        } else {
            txtfolder.setText(Path.of(System.getProperty("user.home"), "Downloads").toString());
        }
        MyProcessor.updateSafePath(Path.of(txtfolder.getText()));
    }//GEN-LAST:event_btsaveActionPerformed

    private void opFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opFolderActionPerformed
        //open the Folder
        var path = Path.of(txtfolder.getText().strip());
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().open(path.toFile());
            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_opFolderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageExtractor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new ImageExtractor().setVisible(true);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(ImageExtractor.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner FileSpiner;
    private javax.swing.JProgressBar PBstate;
    private com.aeongames.edi.utils.visual.Panels.ImagePanel PImage;
    private javax.swing.JButton btsave;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton opFolder;
    private com.aeongames.edi.utils.visual.Panels.TranslucentPanel translucentPanel1;
    private javax.swing.JLabel txtImageType;
    private com.aeongames.edi.utils.visual.TranslucentTextArea txtLog;
    private javax.swing.JTextField txtfolder;
    private javax.swing.JLabel txtstatusbar;
    // End of variables declaration//GEN-END:variables

    private void initListener() {
        var ProcInfoDisp = MyProcessor.getInfoLink();
        ProcInfoDisp.bindCurrentStatus(txtLog);
        ProcInfoDisp.bindSavingFile(txtfolder);
        ProcInfoDisp.bindEditableTxtComp(txtfolder, txtLog);
        ProcInfoDisp.bindEnabledComp(btsave, FileSpiner);
        ProcInfoDisp.bindImageType(txtImageType);
        ProcInfoDisp.bindstatusBarInfo(txtstatusbar);
        ProcInfoDisp.bindFileNumber(FileSpiner);
        ProcInfoDisp.bindImage(PImage);
        ProcInfoDisp.bindIndeterminateProgressBar(PBstate);
        ProcInfoDisp.setUIEnablement(true);
        ProcInfoDisp.updateFromSettings();
        if (MainListener.isProcessingTask() || MainListener.isServiceOnline()) {
            //we cannot add as the service is online 
            return;
        }
        MainListener.addFlavorHandler(MyProcessor, MyProcessor.mySupportedFlavor());
        MainListener.StartClipBoardService();
    }

}
