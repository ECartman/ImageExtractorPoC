/* 
 *  Copyright Â© 2024 Eduardo Vindas Cordoba. All rights reserved.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 * 
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.aeongames.imageextractor;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.FlavorEvent;
import java.awt.datatransfer.FlavorListener;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Base64;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;

/**
 *
 * @author cartman
 */
public class ImageExtractor extends javax.swing.JFrame {

    private String UnderlineData = null;

    /**
     * Creates new form ToolBase
     */
    public ImageExtractor() {
        initComponents();
        initListener();
        txtfolder.setText(Paths.get(System.getProperty("user.home"), "Downloads").toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        FileSpiner = new javax.swing.JSpinner();
        PImage = new com.aeongames.edi.utils.visual.Panels.ImagePanel();
        btauto = new javax.swing.JToggleButton();
        btProcessdata = new javax.swing.JButton();
        txtstatusbar = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtlistenedData = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        txtImageType = new javax.swing.JLabel();
        btsave = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtfolder = new javax.swing.JTextField();
        btautodecript = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Detected Information:");

        jLabel2.setText("Start Image ID:");

        FileSpiner.setModel(new javax.swing.SpinnerNumberModel(164, 0, null, 1));

        javax.swing.GroupLayout PImageLayout = new javax.swing.GroupLayout(PImage);
        PImage.setLayout(PImageLayout);
        PImageLayout.setHorizontalGroup(
            PImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PImageLayout.setVerticalGroup(
            PImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );

        btauto.setSelected(true);
        btauto.setText("Auto-Save");
        btauto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btautoActionPerformed(evt);
            }
        });

        btProcessdata.setText("Decript");
        btProcessdata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btProcessdataActionPerformed(evt);
            }
        });

        txtstatusbar.setText("jLabel3");

        txtlistenedData.setColumns(20);
        txtlistenedData.setLineWrap(true);
        txtlistenedData.setRows(5);
        jScrollPane1.setViewportView(txtlistenedData);

        jLabel3.setText("Image Type:");

        txtImageType.setText("None");

        btsave.setText("Set Save Folder");
        btsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btsaveActionPerformed(evt);
            }
        });

        jLabel4.setText("Save Folder: ");

        txtfolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfolderActionPerformed(evt);
            }
        });

        btautodecript.setText("Auto-Decript");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtstatusbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(FileSpiner, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btauto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btautodecript)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btProcessdata)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtImageType, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtfolder, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btsave)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(FileSpiner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btauto)
                    .addComponent(btProcessdata)
                    .addComponent(jLabel3)
                    .addComponent(txtImageType)
                    .addComponent(jLabel4)
                    .addComponent(txtfolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btsave)
                    .addComponent(btautodecript))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtstatusbar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btautoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btautoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btautoActionPerformed

    private void btProcessdataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btProcessdataActionPerformed
        decript();
    }//GEN-LAST:event_btProcessdataActionPerformed

    private void btsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btsaveActionPerformed
        JFileChooser chs = new JFileChooser(Paths.get(System.getProperty("user.home"), "Downloads").toFile());
        chs.setDialogTitle("Please Select the Destination Folder");
        chs.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chs.showSaveDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            if (Files.isWritable(chs.getSelectedFile().toPath())) {
                String Path = chs.getSelectedFile().toString();
                txtfolder.setText(Path);
            } else {
                txtfolder.setText(Paths.get(System.getProperty("user.home"), "Downloads").toString());
            }
        } else {
            txtfolder.setText(Paths.get(System.getProperty("user.home"), "Downloads").toString());
        }

    }//GEN-LAST:event_btsaveActionPerformed

    private void txtfolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfolderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfolderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageExtractor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ImageExtractor().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner FileSpiner;
    private com.aeongames.edi.utils.visual.Panels.ImagePanel PImage;
    private javax.swing.JButton btProcessdata;
    private javax.swing.JToggleButton btauto;
    private javax.swing.JToggleButton btautodecript;
    private javax.swing.JButton btsave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel txtImageType;
    private javax.swing.JTextField txtfolder;
    private javax.swing.JTextArea txtlistenedData;
    private javax.swing.JLabel txtstatusbar;
    // End of variables declaration//GEN-END:variables

    private void initListener() {
        Clipboard sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();
        sysClip.addFlavorListener(new FlavorListener() {
            @Override
            public void flavorsChanged(final FlavorEvent e) {
                txtstatusbar.setText("Processing Data From Clipboard");
                new SwingWorker<String, String>() {
                    @Override
                    protected String doInBackground() throws Exception {
                        String data = "";
                        try {
                            var transferable = ((Clipboard) e.getSource()).getContents(this);
                            if (transferable.isDataFlavorSupported(DataFlavor.stringFlavor)) {
                                data = transferable.getTransferData(DataFlavor.stringFlavor).toString();
                            }
                        } catch (UnsupportedFlavorException | IOException errrr) {
                            Logger.getLogger(ImageExtractor.class.getName()).log(Level.SEVERE, null, errrr);
                        }
                        if (data != null) {
                            publish(data);
                        }
                        try {
                            sysClip.setContents(((Clipboard) e.getSource()).getContents(this), (Clipboard clipboard, Transferable contents) -> {
                            });
                        } catch (Throwable eerr) {
                        }
                        return data == null ? "" : data.strip();
                    }

                    @Override
                    protected void process(List<String> chunks) {
                        StringBuilder dataparts = new StringBuilder();
                        chunks.forEach((t) -> dataparts.append(t));
                        var data = dataparts.toString();
                        if (!data.equals(UnderlineData)) {
                            if (data.length() < 100) {
                                txtstatusbar.setText("ClipBoard UPDATED: " + data);
                            } else {
                                txtstatusbar.setText("ClipBoard UPDATED: " + data.substring(0, 90) + "...");
                            }
                            if (data.length() <= 300000) {
                                txtlistenedData.setText(data);
                            } else {
                                txtlistenedData.setText(data.substring(0, 300000) + "...");
                            }
                            UnderlineData = data;
                        }
                    }

                    @Override
                    protected void done() {
                        try {
                            var data = get();
                            if (data != null && !data.equals(UnderlineData)) {
                                if (data.length() < 100) {
                                    txtstatusbar.setText("ClipBoard UPDATED: " + data);
                                } else {
                                    txtstatusbar.setText("ClipBoard UPDATED: " + data.substring(0, 100));
                                }
                                if (data.length() <= 300000) {
                                    txtlistenedData.setText(data);
                                } else {
                                    txtlistenedData.setText(data.substring(0, 300000) + "...");
                                }
                                UnderlineData = data;

                                if (btautodecript.isSelected()) {
                                    decript();
                                }
                            }
                        } catch (InterruptedException | ExecutionException ex) {
                            Logger.getLogger(ImageExtractor.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }.execute();

            }
        });

    }

    private void decript() {
        txtstatusbar.setText("Decripting Base64 for data.");
        if (UnderlineData == null) {
            if (txtlistenedData.getText().strip().equals("")) {
                return;
            } else {
                UnderlineData = txtlistenedData.getText().strip();
            }
        }
        int pos = UnderlineData.indexOf(';');
        if (pos < 0) {
            return;
        }
        txtImageType.setText(UnderlineData.substring(0, pos));
        String search = "data:image/png;base64,";
        String base64 = UnderlineData.substring(UnderlineData.lastIndexOf(search) + search.length());
        var bytes = Base64.getDecoder().decode(base64);

        try {
            var img = ImageIO.read(new ByteArrayInputStream(bytes));
            PImage.setImage(img);
            if (btauto.isSelected()) {
                var destinationfolder = Paths.get(txtfolder.getText());
                var filename = FileSpiner.getModel().getValue().toString() + "." + (txtImageType.getText().toLowerCase().contains("png") ? "png" : "jpg");
                destinationfolder = destinationfolder.resolve(filename);
                ImageIO.write(img, txtImageType.getText().toLowerCase().contains("png") ? "png" : "jpg", Files.newOutputStream(destinationfolder, StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE));
                txtstatusbar.setText("the File " + destinationfolder.toString() + " saved. ");
                FileSpiner.getModel().setValue(FileSpiner.getModel().getNextValue());
            }

        } catch (java.nio.file.FileAlreadyExistsException exists) {
            txtstatusbar.setText("the File alredy exists::" + exists.getMessage());
        } catch (IOException ex) {
            Logger.getLogger(ImageExtractor.class.getName()).log(Level.SEVERE, null, ex);

        }
    }
}
