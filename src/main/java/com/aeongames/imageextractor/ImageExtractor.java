/* 
 *  Copyright Â© 2024 Eduardo Vindas Cordoba. All rights reserved.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 * 
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.aeongames.imageextractor;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Base64;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;

/**
 *
 * @author cartman
 */
public class ImageExtractor extends javax.swing.JFrame {

    private String UnderlineData = null;

    /**
     * Creates new form ToolBase
     */
    public ImageExtractor() {
        initComponents();
        initListener();
        txtfolder.setText(Paths.get(System.getProperty("user.home"), "Downloads").toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        FileSpiner = new javax.swing.JSpinner();
        PImage = new com.aeongames.edi.utils.visual.Panels.ImagePanel();
        btauto = new javax.swing.JToggleButton();
        btProcessdata = new javax.swing.JButton();
        txtstatusbar = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtlistenedData = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        txtImageType = new javax.swing.JLabel();
        btsave = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtfolder = new javax.swing.JTextField();
        btautodecript = new javax.swing.JToggleButton();
        PBstate = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Detected Information:");

        jLabel2.setText("Start Image ID:");

        FileSpiner.setModel(new javax.swing.SpinnerNumberModel(226, 0, null, 1));

        javax.swing.GroupLayout PImageLayout = new javax.swing.GroupLayout(PImage);
        PImage.setLayout(PImageLayout);
        PImageLayout.setHorizontalGroup(
            PImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PImageLayout.setVerticalGroup(
            PImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );

        btauto.setSelected(true);
        btauto.setText("Auto-Save");
        btauto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btautoActionPerformed(evt);
            }
        });

        btProcessdata.setText("Decript");
        btProcessdata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btProcessdataActionPerformed(evt);
            }
        });

        txtstatusbar.setText("Ready");

        txtlistenedData.setColumns(20);
        txtlistenedData.setLineWrap(true);
        txtlistenedData.setRows(5);
        jScrollPane1.setViewportView(txtlistenedData);

        jLabel3.setText("Image Type:");

        txtImageType.setText("None");

        btsave.setText("Set Save Folder");
        btsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btsaveActionPerformed(evt);
            }
        });

        jLabel4.setText("Save Folder: ");

        txtfolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfolderActionPerformed(evt);
            }
        });

        btautodecript.setText("Auto-Decript");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(FileSpiner, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btauto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btautodecript)
                        .addGap(18, 18, 18)
                        .addComponent(btProcessdata)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtImageType, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfolder, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btsave)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(PBstate, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtstatusbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(FileSpiner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btauto)
                    .addComponent(btProcessdata)
                    .addComponent(jLabel3)
                    .addComponent(txtImageType)
                    .addComponent(jLabel4)
                    .addComponent(txtfolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btsave)
                    .addComponent(btautodecript))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtstatusbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PBstate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SetControlsEnablement(boolean enabled) {
        txtlistenedData.setEditable(enabled);
        txtlistenedData.setEnabled(enabled);
        btProcessdata.setEnabled(enabled);
        btsave.setEnabled(enabled);
        btauto.setEnabled(enabled);
        btautodecript.setEnabled(enabled);
        PBstate.setIndeterminate(!enabled);
    }


    private void btautoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btautoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btautoActionPerformed

    private void btProcessdataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btProcessdataActionPerformed
        decript();
    }//GEN-LAST:event_btProcessdataActionPerformed

    private void btsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btsaveActionPerformed
        JFileChooser chs = new JFileChooser(Paths.get(System.getProperty("user.home"), "Downloads").toFile());
        chs.setDialogTitle("Please Select the Destination Folder");
        chs.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chs.showSaveDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            if (Files.isWritable(chs.getSelectedFile().toPath())) {
                String Path = chs.getSelectedFile().toString();
                txtfolder.setText(Path);
            } else {
                txtfolder.setText(Paths.get(System.getProperty("user.home"), "Downloads").toString());
            }
        } else {
            txtfolder.setText(Paths.get(System.getProperty("user.home"), "Downloads").toString());
        }

    }//GEN-LAST:event_btsaveActionPerformed

    private void txtfolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfolderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfolderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageExtractor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ImageExtractor().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner FileSpiner;
    private javax.swing.JProgressBar PBstate;
    private com.aeongames.edi.utils.visual.Panels.ImagePanel PImage;
    private javax.swing.JButton btProcessdata;
    private javax.swing.JToggleButton btauto;
    private javax.swing.JToggleButton btautodecript;
    private javax.swing.JButton btsave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel txtImageType;
    private javax.swing.JTextField txtfolder;
    private javax.swing.JTextArea txtlistenedData;
    private javax.swing.JLabel txtstatusbar;
    // End of variables declaration//GEN-END:variables

    private void initListener() {
        Toolkit.getDefaultToolkit().getSystemClipboard().addFlavorListener((final   var e) -> {
            SetControlsEnablement(false);
            new SwingWorker<String, String>() {
                @Override
                protected String doInBackground() throws Exception {
                    String data = "";
                    Clipboard clip = (Clipboard) e.getSource();
                    try {
                        var transferable = clip.getContents(this);
                        publish("Clipboard Change Detected");
                        if (transferable.isDataFlavorSupported(DataFlavor.stringFlavor)) {
                            publish("Clipboard Change is Text");
                            data = transferable.getTransferData(DataFlavor.stringFlavor).toString();
                            publish("Clipboard Data Read");
                        }
                    } catch (UnsupportedFlavorException | IOException errrr) {
                        publish("error Reading the Clipboard");
                        Logger.getLogger(ImageExtractor.class.getName()).log(Level.SEVERE, null, errrr);
                    }
                    try {
                        publish("reseting the ownership on Clipboard");
                        clip.setContents(clip.getContents(this), (var clipboard, var contents) -> {
                        });
                    } catch (Throwable e) {
                    }

                    if (data != null) {
                        data = data.strip();
                        if (data.length() < 100) {
                            publish("ClipBoard UPDATED: " + data);
                        } else {
                            publish("ClipBoard UPDATED: " + data.substring(0, 90) + "...");
                        }
                        synchronized (ProcessingLock) {//deal with data one at the time 
                            if (!data.equals(UnderlineData)) {
                                publish("Clipboard Data is New");
                                UnderlineData = data;
                            } else {
                                data = null;
                            }
                        }
                    }
                    if (data!=null && data.length() >= 200000) {
                        data = "truncated<" + data.substring(0, 75000) + "..." + data.substring(data.length() - 1000, data.length()) + " >truncated";
                    }
                    return data;
                }

                @Override
                protected void process(List<String> chunks) {
                    txtstatusbar.setText(chunks.getLast());
                }

                @Override
                protected void done() {
                    try {
                        var data = get();
                        if (data != null) {
                            txtlistenedData.setText(data);
                        }

                        SetControlsEnablement(true);
                        if (btautodecript.isSelected() && data != null) {
                            decript();
                        }
                    } catch (InterruptedException | ExecutionException ex) {
                        txtstatusbar.setText("Error While Loading Clipboard data");
                        Logger.getLogger(ImageExtractor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }.execute();
        });
    }

    private final Object ProcessingLock = new Object();

    private void decript() {
        SetControlsEnablement(false);
        new SwingWorker<BufferedImage, String>() {
            @Override
            protected BufferedImage doInBackground() throws Exception {
                synchronized (ProcessingLock) {//deal with data one at the time 
                    publish("Decripting Base64 for data.");
                    var Stripdata = txtlistenedData.getText().strip();
                    if (UnderlineData == null && Stripdata.equals("")) {
                        publish("No Data, Skipping");
                        return null;
                    } else if (UnderlineData != null && UnderlineData.equals(Stripdata)) {
                        publish("Image is Alredy process Skipping");
                        return null;
                    } else if (UnderlineData == null) {
                        UnderlineData = Stripdata;
                    }
                    int pos;
                    if (UnderlineData.length() > 1000) {
                        pos = UnderlineData.indexOf(';', 0, 1000);//the delimiter HAS to be on the first part of the string. thus not waste time looking at the full string (assuing the string is long)
                    } else {
                        pos = UnderlineData.indexOf(';');
                    }
                    if (pos < 0) {
                        publish("Data does not match the Required pattern, Skipping");
                        return null;
                    }
                    //txtImageType.setText(UnderlineData.substring(0, pos));
                    var imageType = UnderlineData.substring(0, pos);
                    if (UnderlineData.length() > 1000) {
                        pos = UnderlineData.indexOf(',', pos, 1000);//the delimiter HAS to be on the first part of the string. thus not waste time looking at the full string (assuing the string is long)
                    } else {
                        pos = UnderlineData.indexOf(',', pos);
                    }
                    String base64 = UnderlineData.substring(pos + 1);
                    byte bytes[];
                    try {
                        bytes = Base64.getDecoder().decode(base64);
                    } catch (IllegalArgumentException err) {
                        publish("Data cannot be parsed as Base64 string, Skipping");
                        return null;
                    }
                    try {
                        var img = ImageIO.read(new ByteArrayInputStream(bytes));
                        publish("Image Read.");
                        if (btauto.isSelected()) {
                            var destinationfolder = Paths.get(txtfolder.getText());
                            var filename = FileSpiner.getModel().getValue().toString() + "." + (imageType.toLowerCase().contains("png") ? "png" : "jpg");
                            destinationfolder = destinationfolder.resolve(filename);
                            ImageIO.write(img, imageType.toLowerCase().contains("png") ? "png" : "jpg", Files.newOutputStream(destinationfolder, StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE));
                            publish("the File " + destinationfolder.toString() + " saved. ");
                            FileSpiner.getModel().setValue(FileSpiner.getModel().getNextValue());
                        }
                        return img;
                    } catch (java.nio.file.FileAlreadyExistsException exists) {
                        publish("the File alredy exists::" + exists.getMessage());
                    } catch (IOException ex) {
                        Logger.getLogger(ImageExtractor.class.getName()).log(Level.SEVERE, null, ex);

                    }
                }
                return null;
            }

            @Override

            protected void process(List<String> chunks) {
                txtstatusbar.setText(chunks.getLast());
            }

            @Override
            protected void done() {
                try {
                    var image = get();
                    if (image != null) {
                        PImage.setImage(image);
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    Logger.getLogger(ImageExtractor.class.getName()).log(Level.SEVERE, null, ex);
                }
                SetControlsEnablement(true);
            }
        }.execute();

    }
}
